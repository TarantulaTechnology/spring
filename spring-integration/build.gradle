description = 'Spring Integration'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories {
		maven { url 'http://repo.springsource.org/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.2.7'
	}
}

ext {
	linkHomepage = 'http://www.springintegration.org/'
	linkCi       = 'https://build.springsource.org/browse/INT'
	linkIssue    = 'https://jira.springsource.org/browse/INT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration'
	linkScmConnection    = 'git://github.com/SpringSource/spring-integration.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration.git'
}

allprojects {
	group = 'org.springframework.integration'

	repositories {
		maven { url 'http://repo.springsource.org/libs-milestone' }
		maven { url 'http://repo.springsource.org/plugins-release' }
		mavenCentral()
	}
}

subprojects { subproject ->

	apply plugin: 'java'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		aspectjVersion = '1.6.8'
		cglibVersion = '2.2'
		commonsNetVersion = '3.0.1'
		commonsIoVersion = '2.4'
		derbyVersion = '10.9.1.0'
		easymockVersion = '2.3'
		groovyVersion = '2.1.0'
		hamcrestVersion = '1.3'
		jacksonVersion = '1.9.2'
		jackson2Version = '2.2.3'
		javaxActivationVersion = '1.1.1'
		junitVersion = '4.11'
		log4jVersion = '1.2.12'
		mockitoVersion = '1.9.5'
		eaioUUIDVersion = '3.2'

		springVersionDefault = '3.1.4.RELEASE'
		springVersion = project.hasProperty('springVersion') ? getProperty('springVersion') : springVersionDefault

		springAmqpVersion = '1.2.0.RELEASE'
		springDataMongoVersion = '1.1.1.RELEASE'
		springDataRedisVersion = '1.0.5.RELEASE'
		springGemfireVersion = '1.3.1.RELEASE'
		springSecurityVersion = '3.1.3.RELEASE'
		springSocialTwitterVersion = '1.0.5.RELEASE'
		springWsVersion = '2.1.1.RELEASE'
		springRetryVersion = '1.0.2.RELEASE'
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
	// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
		javaAgentSpringInstrument //Configuration Group used by the JPA Adapter during test execution
		javaAgentOpenJpa //Configuration Group used by the JPA Adapter during test execution
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile "cglib:cglib-nodep:$cglibVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.easymock:easymock:$easymockVersion"
		testCompile "org.easymock:easymockclassextension:$easymockVersion"
		testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	ext.xLintArg = '-Xlint:all'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.integration.*"
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task checkTestConfigs << {
		def configFiles = []
		sourceSets.test.java.srcDirs.each {
			fileTree(it).include('**/*.xml').exclude('**/log4j.xml').each { configFile ->
				def configXml = new XmlParser(false, false).parse(configFile)

				if (configXml.@'xsi:schemaLocation' ==~ /.*spring-[a-z-]*\d\.\d\.xsd.*/) {
					configFiles << configFile
				}
			}
		}
		if (configFiles) {
			throw new InvalidUserDataException('Hardcoded XSD version in the config files:\n' +
												configFiles.collect {relativePath(it)}.join('\n') +
			'\nPlease, use versionless schemaLocations for Spring XSDs to avoid issues with builds on different versions of dependencies.')
		}
	}

	test.dependsOn checkTestConfigs

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

}

project('spring-integration-amqp') {
	description = 'Spring Integration AMQP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.amqp:spring-rabbit:$springAmqpVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-oxm'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		testCompile project(":spring-integration-stream")
		testCompile project(":spring-integration-test")
		testCompile project(":spring-integration-http") // need to test INT-2713
	}

	// suppress deprecation warnings (@SuppressWarnings("deprecation") is not enough for javac)
	compileJava.options.compilerArgs = ["${xLintArg},-deprecation"]
}

project('spring-integration-core') {
	description = 'Spring Integration Core'
	dependencies {
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.retry:spring-retry:$springRetryVersion"
		compile "com.eaio.uuid:uuid:$eaioUUIDVersion"
		compile("org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", optional)
		compile("com.fasterxml.jackson.core:jackson-databind:$jackson2Version", optional)
		testCompile "org.aspectj:aspectjweaver:$aspectjVersion"
	}
}

project('spring-integration-event') {
	description = 'Spring Integration ApplicationEvent Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-feed') {
	description = 'Spring Integration RSS Feed Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile("net.java.dev.rome:rome-fetcher:1.0.0") {
			exclude group: 'junit', module: 'junit'
		}
		compile "net.java.dev.rome:rome:1.0.0"
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-file') {
	description = 'Spring Integration File Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile "commons-io:commons-io:$commonsIoVersion"
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-ftp') {
	description = 'Spring Integration FTP Support'
	dependencies {
		compile project(":spring-integration-file")
		compile "commons-net:commons-net:$commonsNetVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-gemfire') {
	description = 'Spring Integration GemFire Support'
	test {
		forkEvery = 1
		systemProperties['gemfire.disableShutdownHook'] = 'true'
	}
	dependencies {
		compile project(":spring-integration-core")
		compile ("org.springframework.data:spring-data-gemfire:$springGemfireVersion") {
			exclude group: 'org.springframework', module: 'spring-context-support'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		compile "org.springframework:spring-tx:$springVersion"
		testCompile project(":spring-integration-stream")
		testCompile project(":spring-integration-test")

	}
}

project('spring-integration-groovy') {
	description = 'Spring Integration Groovy Support'
	dependencies {
		compile project(":spring-integration-core")
		compile project(":spring-integration-scripting")
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		testCompile project(":spring-integration-test")
		testCompile "org.springframework:spring-web:$springVersion"
	}
}

project('spring-integration-http') {
	description = 'Spring Integration HTTP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-webmvc:$springVersion"

		compile("javax.servlet:javax.servlet-api:3.0.1", provided)

		compile("commons-httpclient:commons-httpclient:3.1") { dep ->
			optional dep
			exclude group: 'junit', module: 'junit'
		}
		compile("net.java.dev.rome:rome-fetcher:1.0.0") { dep ->
			optional dep
			exclude group: 'junit', module: 'junit'
		}
		compile ("net.java.dev.rome:rome:1.0.0", optional)
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-ip') {
	description = 'Spring Integration IP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		runtime project(":spring-integration-stream")
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-jdbc') {
	description = 'Spring Integration JDBC Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "com.google.guava:guava:12.0"
		testCompile project(":spring-integration-test")
		testCompile "com.h2database:h2:1.3.160"
		testCompile "hsqldb:hsqldb:1.8.0.10"
		testCompile "org.apache.derby:derby:$derbyVersion"
		testCompile "org.apache.derby:derbyclient:$derbyVersion"

		testCompile "org.powermock:powermock-module-junit4:1.5"
		testCompile "org.powermock:powermock-api-mockito:1.5"

		testCompile "postgresql:postgresql:9.1-901-1.jdbc4"
		testCompile "mysql:mysql-connector-java:5.1.24"
		testCompile "commons-dbcp:commons-dbcp:1.4"
		//testCompile "com.oracle:ojdbc6:11.2.0.3"

	}

	// suppress derby localization jar path warnings during test compilation
	compileTestJava.options.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-jms') {
	description = 'Spring Integration JMS Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-jms:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile ("org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1", provided)
		testCompile project(":spring-integration-test")
		testCompile ("org.apache.activemq:activemq-core:5.6.0") {
			exclude group: 'org.springframework', module: 'spring-context'
		}
		testCompile "org.springframework:spring-oxm:$springVersion"
	}
}

project('spring-integration-jmx') {
	description = 'Spring Integration JMX Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		testCompile "org.aspectj:aspectjweaver:$aspectjVersion"
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-jpa') {
	description = 'Spring Integration JPA Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-orm:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0.Final"

		testCompile project(":spring-integration-test")
		testCompile "com.h2database:h2:1.3.166"
		testCompile "hsqldb:hsqldb:1.8.0.10"
		testCompile "org.apache.derby:derby:$derbyVersion"

		testCompile "org.hibernate:hibernate-entitymanager:3.6.10.Final"
		testCompile "org.eclipse.persistence:org.eclipse.persistence.jpa:2.3.2"
		testCompile "org.apache.openjpa:openjpa:2.2.0"

		javaAgentSpringInstrument "org.springframework:spring-instrument:$springVersion"
		javaAgentOpenJpa "org.apache.openjpa:openjpa:2.2.0"

		//Suppress openjpa annotation processor warnings
		compileTestJava.options.compilerArgs = ["${xLintArg},-processing"]
	}

	test.doFirst {
		String jvmArgsSpringIntrument = "-javaagent:${configurations.javaAgentSpringInstrument.files.iterator().next()}"
		String jvmArgsOpenJpa         = "-javaagent:${configurations.javaAgentOpenJpa.files.iterator().next()}"
		jvmArgs jvmArgsSpringIntrument , jvmArgsOpenJpa
	}

}

project('spring-integration-mail') {
	description = 'Spring Integration Mail Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.mail:mail:1.4.7", provided)
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
	}

	// suppress javax.activation path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-mongodb') {
	description = 'Spring Integration MongoDB Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.data:spring-data-mongodb:$springDataMongoVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-asm'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-expression'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-redis') {
	description = 'Spring Integration Redis Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-tx:$springVersion"
		compile ("org.springframework.data:spring-data-redis:$springDataRedisVersion") {
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-context-support'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-tx'
		}
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-rmi') {
	description = 'Spring Integration RMI Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		testCompile project(":spring-integration-test")
	}

	// suppress deprecation warnings (@SuppressWarnings("deprecation") is not enough for javac)
	compileJava.options.compilerArgs = ["${xLintArg},-deprecation"]
}

project('spring-integration-scripting') {
	description = 'Spring Integration Scripting Support'
	dependencies {
		compile project(":spring-integration-core")
		testCompile project(":spring-integration-test")
		testCompile("org.jruby:jruby:1.6.3")
		testCompile("org.codehaus.groovy:groovy-all:$groovyVersion")
		testCompile("org.python:jython-standalone:2.5.2")
	}
}

project('spring-integration-security') {
	description = 'Spring Integration Security Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile("org.springframework.security:spring-security-core:$springSecurityVersion") {
			exclude group: 'org.springframework', module: 'spring-support'
		}
		compile("org.springframework.security:spring-security-config:$springSecurityVersion") {
			exclude group: 'org.springframework', module: 'spring-support'
		}
	}
}

project('spring-integration-sftp') {
	description = 'Spring Integration SFTP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile project(":spring-integration-file")
		compile project(":spring-integration-stream")
		compile "com.jcraft:jsch:0.1.49"
		compile "org.springframework:spring-context-support:$springVersion"
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-stream') {
	description = 'Spring Integration Stream Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-syslog') {
	description = 'Spring Integration Syslog Support'
	dependencies {
		compile project(":spring-integration-ip")
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-test') {
	description = 'Spring Integration Test Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "junit:junit:$junitVersion"
		compile "org.hamcrest:hamcrest-all:$hamcrestVersion"
		compile "org.mockito:mockito-core:$mockitoVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-test:$springVersion"
	}
}

project('spring-integration-twitter') {
	description = 'Spring Integration Twitter Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-web:$springVersion"
		compile("org.springframework.social:spring-social-twitter:$springSocialTwitterVersion") {
			exclude group: 'org.springframework', module: 'spring-aop'
			exclude group: 'org.springframework', module: 'spring-asm'
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-context'
			exclude group: 'org.springframework', module: 'spring-core'
			exclude group: 'org.springframework', module: 'spring-expression'
			exclude group: 'org.springframework', module: 'spring-web'
		}
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
	}
}

project('spring-integration-ws') {
	description = 'Spring Integration Web Services Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-expression:$springVersion"
		compile "org.springframework:spring-oxm:$springVersion"
		compile "org.springframework:spring-webmvc:$springVersion"
		compile ("org.springframework.ws:spring-ws-core:$springWsVersion") {
			exclude group: 'org.springframework', module: 'spring-webmvc'
			exclude group: 'org.springframework', module: 'spring-web'
			exclude group: 'org.springframework', module: 'spring-context-support'
		}
		compile("javax.xml.soap:saaj-api:1.3") { dep ->
			optional dep
			exclude group: 'javax.activation', module: 'activation'
		}
		compile("com.sun.xml.messaging.saaj:saaj-impl:1.3", optional)
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
		testCompile "stax:stax-api:1.0.1"
		testCompile 'com.thoughtworks.xstream:xstream:1.4.4'
		testCompile ("org.springframework.ws:spring-ws-support:$springWsVersion") {
			exclude group: 'org.springframework'
		}
		testCompile ("org.springframework:spring-jms:$springVersion") {
			exclude group: 'org.springframework'
		}
		testCompile "org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1"
		testCompile "org.igniterealtime.smack:smack:3.2.1"
		testCompile "org.igniterealtime.smack:smackx:3.2.1"
		testCompile "javax.mail:mail:1.4.5"
	}

	// suppress saaj path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

project('spring-integration-xml') {
	description = 'Spring Integration XML Support'
	dependencies {
		compile project(":spring-integration-core")
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-oxm:$springVersion"
		compile ("org.springframework.ws:spring-xml:$springWsVersion") {
			exclude group: 'org.springframework', module: 'spring-beans'
			exclude group: 'org.springframework', module: 'spring-core'
		}
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		testCompile project(":spring-integration-test")
		testCompile "xmlunit:xmlunit:1.3"
	}
}

project('spring-integration-xmpp') {
	description = 'Spring Integration XMPP Support'
	dependencies {
		compile project(":spring-integration-core")
		compile("javax.activation:activation:$javaxActivationVersion", optional)
		compile "org.igniterealtime.smack:smack:3.2.1"
		compile "org.igniterealtime.smack:smackx:3.2.1"
		compile "org.springframework:spring-context-support:$springVersion"
		testCompile project(":spring-integration-test")
		testCompile project(":spring-integration-stream")
	}

	// suppress smack path warnings
	[compileJava,compileTestJava]*.options*.compilerArgs = ["${xLintArg},-path"]
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	subprojects.each { subproject ->
		def Properties schemas = new Properties();
		def shortName = subproject.name.replaceFirst("${rootProject.name}-", '')
		if (subproject.name.endsWith("-core")) {
			shortName = ''
		}

		subproject.sourceSets.main.resources.find {
			it.path.endsWith('META-INF/spring.schemas')
		}?.withInputStream { schemas.load(it) }

		for (def key : schemas.keySet()) {
			File xsdFile = subproject.sourceSets.main.resources.find {
				it.path.endsWith(schemas.get(key))
			}
			assert xsdFile != null
			into ("integration/${shortName}") {
				from xsdFile.path
			}
		}
	}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
