<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.springframework.org/schema/integration/file"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns:tool="http://www.springframework.org/schema/tool"
            xmlns:integration="http://www.springframework.org/schema/integration"
            targetNamespace="http://www.springframework.org/schema/integration/file"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.springframework.org/schema/beans"/>
    <xsd:import namespace="http://www.springframework.org/schema/integration"
                schemaLocation="http://www.springframework.org/schema/integration/spring-integration-2.0.xsd"/>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
	Defines the configuration elements for Spring Integration File Adapters.
		]]></xsd:documentation>
    </xsd:annotation>

    <xsd:element name="inbound-channel-adapter">
        <xsd:annotation>
            <xsd:documentation>
                Configures an inbound Channel Adapter that polls a directory and sends Messages whose payloads are
                instances of java.io.File.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
            	<xsd:choice minOccurs="0" maxOccurs="1" >
            		<xsd:sequence>
	            		<xsd:element ref="integration:poller" />
		                <xsd:choice minOccurs="0" maxOccurs="1">
		            		<xsd:element ref="locker"/>
		           		    <xsd:element ref="nio-locker"/>
		        		</xsd:choice>
		        	</xsd:sequence>
		        	<xsd:sequence>
		                <xsd:choice>
		            		<xsd:element ref="locker"/>
		           		    <xsd:element ref="nio-locker"/>
		        		</xsd:choice>
		        		<xsd:element ref="integration:poller" minOccurs="0" maxOccurs="1"/>
		        	</xsd:sequence>
            	</xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="id" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Identifies the underlying Spring bean definition (SourcePollingChannelAdapter)
                        
                        Keep in mind that if no "channel" attribute is defined, then the "id" attribute is required.
                        In that case the "id" attribute's value will be used as the channel name and ".adapter" will be
                        appended to the "id" value of the underlying bean definition.
                        ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>            
            <xsd:attribute name="channel" type="xsd:string">
                <xsd:annotation>
	                    <xsd:documentation><![CDATA[Defines the message channel to which the payload shall be forwarded to.
	                        
	                        Keep in mind that any Channel Adapter can be created without a "channel" reference in which case 
	                        it will implicitly create an instance of DirectChannel. The created channel's name will match 
	                        the "id" attribute of the <inbound-channel-adapter/> element. Therefore, if the "channel" attribute
	                        is not provided, then the "id" attribute is required.
	                        ]]></xsd:documentation>
	                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="directory" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Specifies the input directory (The directory to poll from) e.g.:
                    directory="file:/absolute/input" or directory="file:relative/input"]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="comparator" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
	Specify a Comparator to be used when ordering Files. If none is provided, the
	order will be determined by the java.io.File implementation of Comparable.  MUTUALLY EXCLUSIVE with queue-size.
					]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="filter" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
                        Specify a FileListFilter to be used. By default, an AcceptOnceFileListFilter is used, 
                        which ensures files are picked up only once from the directory.
                        
                        You can also apply multiple filters by referencing a CompositeFileListFilter.
                    ]]></xsd:documentation>                   
                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type type="org.springframework.integration.file.filters.FileListFilter"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="filename-pattern" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
Only files matching this ant style path will be picked up by this adapter. Note that
in Spring Integration 1.0 this attribute accepted a regular expression, but from 2.0
filename-regex should be used for that purpose instead.
                            ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="filename-regex" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
Only files matching this regular expression will be picked up by this adapter.
                            ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="scanner" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[Reference to a custom DirectoryScanner implementation.]]>
                    </xsd:documentation>
                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type
                                    type="org.springframework.integration.file.DirectoryScanner"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="prevent-duplicates" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
	A boolean flag indicating whether duplicates should be prevented. If a 'filter' reference is
	provided, duplicate prevention will not be enabled by default (the assumption is that the
	provided filter is sufficient), but setting this to true will enable it. If a 'filename-pattern'
	is provided, duplicate prevention will be enabled by default (preceding the pattern matching),
	but setting this to false will disable it. If neither 'filter' or 'filename-pattern' is provided,
	duplicate prevention is enabled by default, but setting this to false will disable it. For more
	detail on the actual duplicate prevention, see the javadoc for AcceptOnceFileListFilter.
					]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="auto-startup" type="xsd:string" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Lifecycle attribute signaling if this component should be started during Application Context startup.
                    </xsd:documentation>
                </xsd:annotation>            
            </xsd:attribute>            
            <xsd:attribute name="auto-create-directory" type="xsd:string" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Specify whether to automatically create the source directory if it does not yet exist when this
                        adapter is being initialized. The default value is 'true'. If set to 'false' and the directory
                        does not exist upon initialization, an Exception will be thrown.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="queue-size" type="xsd:integer">
                <xsd:annotation>
                  <xsd:documentation>
                    Specify the maximum number of files stored in memory by the underlying FileReadingMessageSource.
                    This is useful to limit the memory footprint of this endpoint. Using a stateful filter would counter
                    this benefit, so AcceptOnceFileListFilter is not used when this attribute is specified.
                    MUTUALLY EXCLUSIVE with comparator, if comparator is set this attribute will be ignored.
                    MUTUALLY EXCLUSIVE with stateful filtering.
                  </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="outbound-channel-adapter">
        <xsd:annotation>
            <xsd:documentation>
                Configures an outbound Channel Adapter that writes Message payloads to a File.
            </xsd:documentation>
        </xsd:annotation>    
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="outboundFileBaseType">
                    <xsd:attribute name="channel" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The channel through which outgoing messages will arrive.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="outbound-gateway">
        <xsd:annotation>
            <xsd:documentation>
                Configures an outbound Gateway that writes request Message payloads to a File and then generates a
                reply Message containing the newly written File as its payload.
            </xsd:documentation>
        </xsd:annotation>    
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="outboundFileBaseType">
                    <xsd:attribute name="request-channel" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The channel through which outgoing messages will arrive.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="reply-channel" type="xsd:string">
                        <xsd:annotation>
		                    <xsd:documentation>
		                        <![CDATA[After writing the File, it will be sent to the specified reply channel as the payload of a Message. 
		                                 Another way of providing the 'reply-channel' is by setting the MessageHeaders.REPLY_CHANNEL Message Header]]>
		                    </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="outboundFileBaseType">
        <xsd:sequence>
            <xsd:element ref="integration:poller" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string">
	        <xsd:annotation>
	            <xsd:documentation><![CDATA[Identifies the underlying Spring bean definition (EventDrivenConsumer)]]></xsd:documentation>
	        </xsd:annotation>     
        </xsd:attribute>
        <xsd:attribute name="directory" type="xsd:string" use="required">
	        <xsd:annotation>
	            <xsd:documentation><![CDATA[Specifies the output directory, e.g.:
	            directory="file:/absolute/output" or directory="file:relative/output"]]></xsd:documentation>
	        </xsd:annotation>        
        </xsd:attribute>
        <xsd:attribute name="filename-generator" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
	                <![CDATA[Allows you to provide a reference to the FileNameGenerator strategy 
	                to use when generating the destination file's name. If not specified the
	                DefaultFileNameGenerator is used.]]>
                </xsd:documentation>
                <xsd:appinfo>
                    <tool:annotation kind="ref">
                        <tool:expected-type type="org.springframework.integration.file.FileNameGenerator"/>
                    </tool:annotation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="filename-generator-expression" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
				Allows you to provide a SpEL expression which will compute the file name of 
			    the target file (e.g., assuming payload is java.io.File "payload.name + '.transferred'");
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
        <xsd:attribute name="temporary-file-suffix" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
					Extension used when uploading files. We change it after we know it's uploaded.
					</xsd:documentation>
				</xsd:annotation>
		</xsd:attribute>
        <xsd:attribute name="delete-source-files" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	Specify whether to delete source files after writing to the destination directory.
	This will take effect if the Message payload is the actual source File instance
	or if the original File instance (or its path) is available in the header value
	associated with the FileHeaders.ORIGINAL_FILE constant. The default value is false.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="order" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	Specifies the order for invocation when this endpoint is connected as a
	subscriber to a SubscribableChannel.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="auto-create-directory" type="xsd:string" default="true">
            <xsd:annotation>
                <xsd:documentation><![CDATA[Specify whether to automatically create the destination directory if it does not yet exist when this
                    adapter is being initialized. The default value is 'true'. If set to 'false' and the directory does
                    not exist upon initialization, an Exception will be thrown.]]>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="auto-startup" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[Lifecycle attribute signaling if this component should be started during Application Context startup.]]>
                </xsd:documentation>
            </xsd:annotation>           
        </xsd:attribute>
        <xsd:attribute name="charset" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[Set the charset name to use when writing a File from a String-based 
                    Message payload, e.g. charset="UTF-8". If not set, the default charset of this 
                    Java virtual machine is used.
                    ]]>
                </xsd:documentation>
            </xsd:annotation>            
        </xsd:attribute>          
    </xsd:complexType>

    <xsd:element name="file-to-string-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Creates a Transformer that converts a File payload to a String.
            </xsd:documentation>
        </xsd:annotation>    
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="transformerType">
                    <xsd:attribute name="charset" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                <![CDATA[Set the charset name to use when converting a File 
                                payload to a String, e.g. charset="UTF-8". If not set, the default charset of this 
                                Java virtual machine is used.]]>
                            </xsd:documentation>
                        </xsd:annotation>    
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="file-to-bytes-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Creates a Transformer that converts a File payload to an array of bytes.
            </xsd:documentation>
        </xsd:annotation>    
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="transformerType"/>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="transformerType">
        <xsd:attribute name="id" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[Identifies the underlying Spring bean definition (EventDrivenConsumer)]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="input-channel" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[The input channel of the transformer.]]>
                </xsd:documentation>                
                <xsd:appinfo>
                    <tool:annotation kind="ref">
                        <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                    </tool:annotation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="output-channel" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[The channel to which the transformer will send the transformed message. 
                    Optional, because incoming messages can specify a reply channel using the 'replyChannel' 
                    message header value themselves.]]>
                </xsd:documentation>                  
                <xsd:appinfo>
                    <tool:annotation kind="ref">
                        <tool:expected-type type="org.springframework.integration.MessageChannel"/>
                    </tool:annotation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="delete-files" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <![CDATA[The delete-files option signals to the transformer that it should delete the 
                    inbound File after the transformation is complete.]]>
                </xsd:documentation>            
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="locker">
        <xsd:annotation>
		<xsd:documentation>
		    <![CDATA[When multiple processes are reading from the same 
		    directory it can be desirable to lock files to prevent them 
		    from being picked up concurrently. To do this you can specify a reference to a FileLocker.]]>
		</xsd:documentation>    
        </xsd:annotation>                  
        <xsd:complexType>
            <xsd:attribute name="ref" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        <![CDATA[The reference to the FileLocker.]]>
                    </xsd:documentation>                     
                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type type="org.springframework.integration.file.FileLocker"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="nio-locker">
        <xsd:annotation>
            <xsd:documentation>
           <![CDATA[When multiple processes are reading from the same directory 
           it can be desirable to lock files to prevent them from being picked up 
           concurrently. This is a java.nio based implementation available out of the box.]]>
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:element>

</xsd:schema>
