<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="migration-1.0-2.0"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Changes between 1.0 and 2.0</title>

    <para>
        For a detailed migration guide in regards to upgrading an existing application
        that uses Spring Integration older than version 2.0, please see:
    </para>
    <para>
        <ulink url="http://www.springsource.org/node/2976"/>
    </para>
    <section id="migration-spring-30-support">
        <title>Spring 3 support</title>
        <para>
        Spring Integration 2.0 is built on top of Spring 3.0.5 and makes many of its features available to our users.
        </para>

        <section id="spel-support">
            <title>Support for the Spring Expression Language (SpEL)</title>
            <para>
            You can now use SpEL expressions within the <emphasis>transformer, router, filter,
            splitter, aggregator, service-activator, header-enricher</emphasis>, and many more elements of the
            Spring Integration core namespace as well as various adapters.
            There are many samples provided throughout this manual.
            </para>
        </section>

        <section id="conversion-support">
            <title>ConversionService and Converter</title>
            <para>
            You can now benefit from <emphasis>Conversion Service</emphasis> support provided with Spring while configuring
            many Spring Integration components such as <ulink url="http://www.eaipatterns.com/DatatypeChannel.html">Datatype Channel</ulink>.
            See <xref linkend="channel-implementations"/> as well <xref linkend="service-activator-introduction"/>.
            Also, the SpEL support mentioned in the previous point also relies upon the ConversionService. Therefore, you
            can register Converters once, and take advantage of them anywhere you are using SpEL expressions.
            </para>
        </section>

        <section id="task-scheduler-poller-support">
            <title>TaskScheduler and Trigger</title>
            <para>
            Spring 3.0 defines two new strategies related to scheduling: <emphasis>TaskScheduler and Trigger</emphasis>
            Spring Integration (which uses a lot of scheduling) now builds upon these. In fact, Spring Integration 1.0
            had originally defined some of the components (e.g. CronTrigger) that have now been migrated into Spring 3.0's
            core API. Now, you can benefit from reusing the same components within the entire Application Context (not just
            Spring Integration configuration). Configuration of Spring Integration Pollers has been greatly simplified
            as well by providing attributes for directly configuring rates, delays, cron expressions, and trigger references.
            See <xref linkend="channel-adapter"/> for sample configurations.
            </para>
        </section>

        <section id="rest-support">
            <title>RestTemplate and HttpMessageConverter</title>
            <para>
            Our outbound HTTP adapters now delegate to Spring's RestTemplate for executing the HTTP request and handling its response.
            This also means that you can reuse any custom HttpMessageConverter implementations.
            See <xref linkend="http-outbound"/> for more details.
            </para>
        </section>
    </section>

    <section id="new-eip">
        <title>Enterprise Integration Pattern Additions</title>
        <para>
        Also in 2.0 we have added support for even more of the patterns described in Hohpe and Woolf's
        <ulink url="http://www.eaipatterns.com/">Enterprise Integration Patterns</ulink> book.
        </para>

        <section id="new-message-history">
            <title>Message History</title>
            <para>
            We now provide support for the <ulink url="http://www.eaipatterns.com/MessageHistory.html">Message History</ulink> pattern
            allowing you to keep track of all traversed components, including the name of each channel and endpoint as well as the timestamp
            of that traversal. See <xref linkend="message-history"/> for more details.
            </para>
        </section>

        <section id="new-message-store">
            <title>Message Store</title>
            <para>
            We now provide support for the <ulink url="http://www.eaipatterns.com/MessageStore.html">Message Store</ulink> pattern.
            The Message Store provides a strategy for persisting messages on behalf of any process whose scope extends beyond a single
            transaction, such as the Aggregator and Resequencer. Many sections of this document provide samples on how to use a Message Store as it
            affects several areas of Spring Integration. See <xref linkend="message-store"/>, <xref linkend="claim-check"/>,
            <xref linkend="channel"/>, <xref linkend="aggregator"/>, <xref linkend="jdbc"/>, and <xref linkend="resequencer"/> for more details
            </para>
        </section>

        <section id="new-claim-check">
            <title>Claim Check</title>
            <para>
            We have added an implementation of the <ulink url="http://www.eaipatterns.com/StoreInLibrary.html">Claim Check</ulink> pattern.
            The idea behind the Claim Check pattern is that you can exchange a Message payload for a "claim ticket" and vice-versa.
            This allows you to reduce bandwidth and/or avoid potential security issues when sending Messages across channels.
            See <xref linkend="claim-check"/> for more details.
            </para>
        </section>

        <section id="new-control-bus">
            <title>Control Bus</title>
            <para>
            We have provided implementations of the <ulink url="http://www.eaipatterns.com/ControlBus.html">Control Bus</ulink> pattern which
            allows you to use messaging to manage and monitor endpoints and channels. The implementations include both a SpEL-based approach
            and one that executes Groovy scripts.
            See <xref linkend="control-bus"/> and <xref linkend="groovy-control-bus"/> for more details.
            </para>
        </section>

    </section>

    <section id="new-adapters">
        <title>New Channel Adapters and Gateways</title>
        <para>
        We have added several new Channel Adapters and Messaging Gateways in Spring Integration 2.0.
        </para>


        <section id="new-ip">
            <title>TCP/UDP Adapters</title>
            <para>
            We have added Channel Adapters for receiving and sending messages over the TCP and UDP internet protocols.
            See <xref linkend="ip"/> for more details. Also, you can checkout the following blog:
            <ulink url="http://blog.springsource.com/2010/03/29/using-udp-and-tcp-adapters-in-spring-integration-2-0-m3/">TCP/UDP support</ulink>
            </para>
        </section>

        <section id="new-twitter">
            <title>Twitter Adapters</title>
            <para>
            Twitter adapters provides support for sending and receiving Twitter Status
            updates as well as Direct Messages. You can also perform Twitter Searches with an inbound Channel Adapter.
            See  <xref linkend="twitter"/> for more details.
            </para>
        </section>

        <section id="new-xmpp">
            <title>XMPP Adapters</title>
            <para>
            The new XMPP adapters support both Chat Messages and Presence events. See <xref linkend="xmpp"/> for more details.
            </para>
        </section>

        <section id="new-ftp">
            <title>FTP/FTPS Adapters</title>
            <para>
            Inbound and outbound File transfer support over FTP/FTPS is now available. See <xref linkend="ftp"/> for more details.
            </para>
        </section>

        <section id="new-sftp">
            <title>SFTP Adapters</title>
            <para>
            Inbound and outbound File transfer support over SFTP is now available. See <xref linkend="sftp"/> for more details.
            </para>
        </section>

        <section id="new-feed">
            <title>Feed Adapters</title>
            <para>
            We have also added Channel Adapters for receiving news feeds (ATOM/RSS). See <xref linkend="feed"/> for more details.
            </para>
        </section>
    </section>

    <section id="new-other">
        <title>Other Additions</title>

        <section id="new-groovy">
            <title>Groovy Support</title>
            <para>
            With Spring Integration 2.0 we've added Groovy support allowing you to
            use Groovy scripting language to provide integration and/or business logic.
            See <xref linkend="groovy"/> for more details.
            </para>
        </section>

        <section id="new-map-transformer">
            <title>Map Transformers</title>
            <para>
            These symmetrical transformers convert payload objects to and from a Map. See <xref linkend="transformer"/> for more details.
            </para>
        </section>

        <section id="new-json-transformer">
            <title>JSON Transformers</title>
            <para>
            These symmetrical transformers convert payload objects to and from JSON. See <xref linkend="transformer"/> for more details.
            </para>
        </section>

        <section id="new-serialize-transformer">
            <title>Serialization Transformers</title>
            <para>
            These symmetrical transformers convert payload objects to and from byte arrays.
            They also support the Serializer and Deserializer strategy interfaces that have been added as of Spring 3.0.5.
            See <xref linkend="transformer"/> for more details.
            </para>
        </section>

    </section>

    <section id="new-refactoring">
        <title>Framework Refactoring</title>
        <para>
        The core API went through some significant refactoring to make it simpler and more usable. Although we anticipate
        that the impact to the end user should be minimal, please read through this document to find what was
        changed. Especially, visit <xref linkend="dynamic-routers"/> , <xref linkend="gateway"/>, <xref linkend="http-outbound"/>,
        <xref linkend="message"/>, and <xref linkend="aggregator"/> for more details. If you are depending directly on some of
        the core components (Message, MessageHeaders, MessageChannel, MessageBuilder, etc.), you will notice that you need to
        update any import statements. We restructured some packaging to provide the flexibility we needed for extending the
        domain model while avoiding any cyclical dependencies (it is a policy of the framework to avoid such "tangles").
        </para>
    </section>

    <section id="new-infrastructure">
        <title>New Source Control Management and Build Infrastructure</title>
        <para>
        With Spring Integration 2.0 we have switched our build environment to use Git for source control. To access our repository simply follow this URL:
        <ulink url="http://git.springsource.org/spring-integration">http://git.springsource.org/spring-integration</ulink>.
        We have also switched our build system to <ulink url="http://gradle.org/">Gradle</ulink>.
        </para>
    </section>

    <section id="new-samples">
        <title>New Spring Integration Samples</title>
        <para>
        With Spring Integration 2.0 we have decoupled the samples from our main release distribution. Please read this blog to get more info
        <ulink url="http://blog.springsource.com/2010/09/29/new-spring-integration-samples/">New Spring Integration Samples</ulink>
        We have also created many new samples, including samples for every new Adapter.
        </para>
    </section>

    <section id="new-sts">
        <title>SpringSource Tool Suite Visual Editor for Spring Integration</title>
        <para>
        There is an amazing new visual editor for Spring Integration included within the latest version of SpringSource Tool Suite.
        If you are not already using STS, please download it here:
        </para>
        <para>
            <ulink url="http://www.springsource.com/landing/best-development-tool-enterprise-java"/>
        </para>
    </section>

</section>


