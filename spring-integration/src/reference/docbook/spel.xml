<?xml version="1.0" encoding="UTF-8"?>
<appendix xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="spel"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Spring Expression Language (SpEL)</title>

	<section id="spel-intro">
		<title>Introduction</title>
		<para>
			Many Spring Integration components can be configured using expressions. These expressions
			are written in the <ulink url="http://static.springsource.org/spring-framework/docs/current/spring-framework-reference/html/expressions.html">
			Spring Expression Language</ulink>.
		</para>
		<para>
			In most cases, the <emphasis>#root</emphasis> object is the
			<classname>Message</classname> which, of course, has two properties - <code>headers</code> and
			<code>payload</code> - allowing such expressions as <code>payload</code>, <code>payload.foo</code>,
			<code>headers['my.header']</code> etc.
		</para>
		<para>
			In some cases, additional variables are provided, for example the <code>&lt;int-http:inbound-gateway/&gt;</code>
			provides <code>#requestParams</code> (parameters from the HTTP request) and <code>#pathVariables</code>
			(values from path placeholders in the URI).
		</para>
		<para>
			For all SpEL expressions, a <interfacename>BeanResolver</interfacename> is available, enabling references to
			any bean in the application context. For example <code>@myBean.foo(payload)</code>. In addition, two
			<interfacename>PropertyAccessors</interfacename> are available; a <classname>MapAccessor</classname>
			enables accessing values in a <interfacename>Map</interfacename> using a key, and a
			<classname>ReflectivePropertyAccessor</classname> which allows access to fields and or JavaBean compliant
			properties (using getters and setters). This is how the <interfacename>Message</interfacename> headers
			and payload properties are accessible.
		</para>
	</section>
	<section id="spel-customization">
		<title>SpEL Evaluation Context Customization</title>
		<para>
			Starting with Spring Integration 3.0, it is possible to add additional
			<interfacename>PropertyAccessor</interfacename>s to the SpEL evaluation context.
			In fact, the framework provides one such accessor,
			the <classname>JsonPropertyAccessor</classname> which can be used (read-only) to access fields from
			a <classname>JsonNode</classname>, or JSON in a <classname>String</classname>. Or you can create your
			own <interfacename>PropertyAccessor</interfacename> if you have specific needs.
		</para>
		<para>
			In addition, custom functions can be added. Custom functions are <code>static</code> methods
			declared on a class. Functions and property accessors are available in any SpEL
			expression used throughout the framework.
		</para>
		<para>
			To configure your custom accessors and functions, add an
			<classname>IntegrationEvaluationContextFactoryBean</classname> with
			<code>id="integrationEvaluationContext"</code>
			to your application context, with the appropriate configuration; for example:
		</para>
		<programlisting language="xml"><![CDATA[<beans:bean id="integrationEvaluationContext"
			class="org.springframework.integration.config.IntegrationEvaluationContextFactoryBean">
	<property name="propertyAccessors">
		<list>
			<bean class="foo.MyCustomPropertyAccessor"/>
		</list>
	</property>
	<property name="functions">
		<map>
			<entry key="barcalc" value="#{T(foo.MyFunctions).getMethod('calc', T(foo.MyBar))}"/>
		</map>
	</property>
</bean>]]></programlisting>
		<para>
			This factory bean definition will override the default <code>integrationEvaluationContext</code>
			bean definition, adding the custom accessor to the list (which also includes the standard
			accessors mentioned above), and one custom function.
		</para>
		<para>
			Note that custom functions are static methods.
			In the above example, the custom function is a static method <code>calc</code> on class
			<classname>MyFunctions</classname> and takes a single parameter of type <classname>MyBar</classname>.
		</para>
		<para>
			Say you have a <classname>Message</classname> with a payload that has a type <classname>MyFoo</classname>
			on which you need to perform some action to create a <classname>MyBar</classname> object from it,
			and you then want to invoke a custom function <code>calc</code> on that object.
		</para>
		<para>
			The standard property accessors wouldn't know how to get a <classname>MyBar</classname>
			from a <classname>MyFoo</classname> so you could write
			and configure a custom property accessor to do so. So, your final expression might be
			<code>"#barcalc(payload.myBar)"</code>.
		</para>
	</section>
	<section id="spel-functions">
		<title>SpEL Functions</title>
		<para>
			Namespace support is provided for easy addition of SpEL custom functions.
			You can specify <code>&lt;spel-function/&gt;</code> components to provide
			<ulink url="http://static.springsource.org/spring-framework/docs/current/spring-framework-reference/html/expressions.html#expressions-ref-functions">
			custom SpEL functions</ulink> to the <interfacename>EvaluationContext</interfacename> used throughout the framework.
			Instead of configuring the factory bean above, simply add one or more of these components
			and the framework will automatically add them to the default <emphasis>integrationEvaluationContext</emphasis>
			factory bean.
		</para>
		<para>For example, assuming we have a useful static method to evaluate XPath:</para>
		<programlisting language="xml"><![CDATA[<int:spel-function id="xpath"
	class="com.foo.test.XPathUtils" method="evaluate(java.lang.String, java.lang.Object)"/>

<int:transformer input-channel="in" output-channel="out"
		 expression="#xpath('//foo/@bar', payload)" />
		]]></programlisting>
		<para>
			With this sample:
			<itemizedlist>
				<listitem>
					The default <classname>IntegrationEvaluationContextFactoryBean</classname> bean with id
					<emphasis>integrationEvaluationContext</emphasis> is registered with the application
					context.
				</listitem>
				<listitem>
					The <code>&lt;spel-function/&gt;</code> is parsed and added to the <code>functions</code>
					Map of <emphasis>integrationEvaluationContext</emphasis> as map entry with <code>id</code> as the key
					and the static <classname>Method</classname> as the value.
				</listitem>
				<listitem>
					The <emphasis>integrationEvaluationContext</emphasis> factory bean creates a new
					<classname>StandardEvaluationContext</classname> instance,
					and it is configured with the default
					<interfacename>PropertyAccessor</interfacename>s, <interfacename>BeanResolver</interfacename>
					and the custom function.
				</listitem>
				<listitem>
					That <interfacename>EvaluationContext</interfacename> instance is injected into the
					<classname>ExpressionEvaluatingTransformer</classname> bean.
				</listitem>
			</itemizedlist>
		</para>
		<para>
			<note>
				SpEL functions declared in a parent context are also made available in any child context(s). Each
				context has its own instance of the <emphasis>integrationEvaluationContext</emphasis> factory bean
				because each needs a different <interfacename>BeanResolver</interfacename>, but the function
				declarations are inherited (and can be overridden if needed by declaring a SpEL function with
				the same name. The functions themselves are processed by the framework - they do not appear
				as beans in the application context.
			</note>
			<note>
				At this time, <interfacename>PropertyAccessor</interfacename>s are not inherited and must be
				declared as described above in each context.
			</note>
		</para>
	</section>
</appendix>
